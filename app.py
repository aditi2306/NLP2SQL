import streamlit as st
from langchain_gpt_sql import run_query, get_schema_for_tables

# Streamlit page setup
st.set_page_config(page_title="ReAct SQL Agent", layout="centered")
st.title("Natural Language to SQL Query")

# User input
question = st.text_input("Enter your natural language question:")

# Optional table selection
available_tables = [
    "Products", "Employees", "Orders", "Customers", "Categories", "Region",
    "Shippers", "Suppliers", "Territories", "CustomerCustomerDemo",
    "CustomerDemographics", "EmployeeTerritories", "Order Details"
]
selected_tables = st.multiselect("Select tables to include in the schema (optional):", available_tables)

# Schema preview
schema_preview = None
if selected_tables:
    schema_preview = get_schema_for_tables(selected_tables)
    st.markdown("Preview Schema")
    st.code(schema_preview, language="sql")

# Button to run query
if st.button("Run Query"):
    if not question:
        st.warning("Please enter a question.")
    else:
        with st.spinner("Thinking..."):
            try:
                result = run_query(question, schema_preview if selected_tables else None)

                if result is None:
                    st.error("The agent failed to generate a SQL query.")
                else:
                    sql_query, rows, columns = result

                    st.success("Answer generated by the agent")

                    st.subheader("Generated SQL Query")
                    if sql_query:
                        st.code(sql_query, language="sql")
                    else:
                        st.warning("SQL query could not be extracted.")

                    st.subheader("Query Results")
                    if rows:
                        st.dataframe({col: [row[i] for row in rows] for i, col in enumerate(columns)})
                    else:
                        st.info("No results returned or query failed.")
            except Exception as e:
                st.error(f"Error: {e}")
